{
  "version": 3,
  "sources": ["../src/js/sections/score-history.js"],
  "sourcesContent": ["class ScoreHistoryComponent extends HTMLElement {\n    constructor() {\n        super();\n        this.canvas = this.querySelector(\"canvas\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.data = this.parseData();\n    }\n\n    connectedCallback() {\n        this.initChart();\n    }\n\n    parseData() {\n        // Sample data - can be passed via attributes or fetched from API\n        return {\n            labels: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],\n            datasets: [{\n                label: 'NB Score',\n                data: [null, null, null, 520, 580, 493, null, 510, null, null, null, null],\n                borderColor: '#1e40af',\n                backgroundColor: '#1e40af',\n                borderWidth: 3,\n                pointRadius: 6,\n                pointHoverRadius: 8,\n                pointBackgroundColor: '#1e40af',\n                pointBorderColor: '#ffffff',\n                pointBorderWidth: 2,\n                tension: 0.1,\n                fill: false\n            }]\n        };\n    }\n\n    initChart() {\n        const settings = {\n            type: 'line',\n            data: this.data,\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                interaction: {\n                    intersect: false,\n                    mode: 'index'\n                },\n                plugins: {\n                    legend: {\n                        display: false\n                    },\n                    tooltip: {\n                        enabled: true,\n                        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                        titleColor: '#fff',\n                        bodyColor: '#fff',\n                        borderColor: '#1e40af',\n                        borderWidth: 1,\n                        callbacks: {\n                            title: function (context) {\n                                return context[0].label;\n                            },\n                            label: function (context) {\n                                return `Score: ${context.parsed.y}`;\n                            }\n                        }\n                    }\n                },\n                scales: {\n                    x: {\n                        display: true,\n                        grid: {\n                            display: true,\n                            color: 'rgba(0, 0, 0, 0.1)',\n                            lineWidth: 1\n                        },\n                        ticks: {\n                            color: '#666',\n                            font: {\n                                size: 12\n                            }\n                        }\n                    },\n                    y: {\n                        display: true,\n                        min: 300,\n                        max: 900,\n                        ticks: {\n                            stepSize: 100,\n                            color: '#666',\n                            font: {\n                                size: 12\n                            },\n                            callback: function (value) {\n                                return value;\n                            }\n                        },\n                        grid: {\n                            display: true,\n                            color: 'rgba(0, 0, 0, 0.1)',\n                            lineWidth: 1\n                        }\n                    }\n                },\n                elements: {\n                    point: {\n                        hoverBackgroundColor: '#1e40af'\n                    }\n                },\n                onHover: (event, activeElements) => {\n                    this.canvas.style.cursor = activeElements.length > 0 ? 'pointer' : 'default';\n                },\n                onClick: (event, activeElements) => {\n                    if (activeElements.length > 0) {\n                        const dataIndex = activeElements[0].index;\n                        const value = this.data.datasets[0].data[dataIndex];\n                        if (value !== null) {\n                            this.showGaugeAtPoint(dataIndex, value);\n                        }\n                    }\n                }\n            },\n            plugins: [{\n                id: 'gaugeOverlay',\n                afterDraw: (chart) => {\n                    this.drawGaugeOverlay(chart);\n                }\n            }, {\n                id: 'dataLabels',\n                afterDatasetsDraw: (chart) => {\n                    this.drawDataLabels(chart);\n                }\n            }]\n        };\n\n        this.chart = new Chart(this.ctx, settings);\n    }\n\n    drawGaugeOverlay(chart) {\n        const { ctx } = chart;\n        const meta = chart.getDatasetMeta(0);\n        const data = meta.data;\n\n        // Find the point with gauge (August - index 7)\n        const gaugeIndex = 7; // August\n        if (data[gaugeIndex] && !data[gaugeIndex].skip) {\n            const point = data[gaugeIndex];\n            const value = this.data.datasets[0].data[gaugeIndex];\n\n            if (value !== null) {\n                this.drawGaugeAtPoint(ctx, point.x, point.y, value);\n            }\n        }\n    }\n\n    drawGaugeAtPoint(ctx, x, y, score) {\n        const gaugeRadius = 40;\n        const needleLength = gaugeRadius * 0.6;\n        const centerX = x;\n        const centerY = y - gaugeRadius - 20;\n\n        ctx.save();\n\n        // Draw gauge background (semicircle)\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, gaugeRadius, Math.PI, 2 * Math.PI);\n        ctx.fillStyle = '#f3f4f6';\n        ctx.fill();\n        ctx.strokeStyle = '#d1d5db';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n\n        // Draw gauge segments\n        const segments = [\n            { start: Math.PI, end: Math.PI + Math.PI * 0.2, color: '#ef4444' },\n            { start: Math.PI + Math.PI * 0.2, end: Math.PI + Math.PI * 0.4, color: '#f59e0b' },\n            { start: Math.PI + Math.PI * 0.4, end: Math.PI + Math.PI * 0.6, color: '#eab308' },\n            { start: Math.PI + Math.PI * 0.6, end: Math.PI + Math.PI * 0.8, color: '#22c55e' },\n            { start: Math.PI + Math.PI * 0.8, end: 2 * Math.PI, color: '#16a34a' }\n        ];\n\n        segments.forEach(segment => {\n            ctx.beginPath();\n            ctx.arc(centerX, centerY, gaugeRadius - 5, segment.start, segment.end);\n            ctx.lineWidth = 8;\n            ctx.strokeStyle = segment.color;\n            ctx.stroke();\n        });\n\n        // Calculate needle angle\n        const min = 300;\n        const max = 900;\n        const clamped = Math.max(min, Math.min(max, score));\n        const t = (clamped - min) / (max - min);\n        const angle = Math.PI + t * Math.PI;\n\n        // Draw needle\n        const tipX = centerX + needleLength * Math.cos(angle);\n        const tipY = centerY + needleLength * Math.sin(angle);\n        const baseHalf = 4;\n\n        const leftX = centerX + baseHalf * Math.cos(angle + Math.PI / 2);\n        const leftY = centerY + baseHalf * Math.sin(angle + Math.PI / 2);\n        const rightX = centerX + baseHalf * Math.cos(angle - Math.PI / 2);\n        const rightY = centerY + baseHalf * Math.sin(angle - Math.PI / 2);\n\n        ctx.beginPath();\n        ctx.moveTo(tipX, tipY);\n        ctx.lineTo(leftX, leftY);\n        ctx.lineTo(rightX, rightY);\n        ctx.closePath();\n        ctx.fillStyle = '#1f2937';\n        ctx.fill();\n\n        // Draw center hub\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, 6, 0, 2 * Math.PI);\n        ctx.fillStyle = '#1f2937';\n        ctx.fill();\n\n        // Draw score text\n        ctx.fillStyle = '#1f2937';\n        ctx.font = 'bold 14px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(score.toString(), centerX, centerY + 5);\n\n        ctx.restore();\n    }\n\n    drawDataLabels(chart) {\n        const { ctx } = chart;\n        const meta = chart.getDatasetMeta(0);\n        const data = meta.data;\n\n        ctx.save();\n        ctx.font = 'bold 12px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'bottom';\n\n        data.forEach((point, index) => {\n            const value = this.data.datasets[0].data[index];\n            if (value !== null) {\n                // Draw label background\n                const labelText = `${value} +`;\n                const textWidth = ctx.measureText(labelText).width;\n                const labelX = point.x;\n                const labelY = point.y - 15;\n\n                // Different colors for different points\n                let bgColor = '#1e40af';\n                if (index === 7) bgColor = '#f59e0b'; // August - yellow\n\n                ctx.fillStyle = bgColor;\n                ctx.fillRect(labelX - textWidth / 2 - 4, labelY - 16, textWidth + 8, 18);\n\n                // Draw label text\n                ctx.fillStyle = '#ffffff';\n                ctx.fillText(labelText, labelX, labelY);\n            }\n        });\n\n        ctx.restore();\n    }\n\n    showGaugeAtPoint(dataIndex, value) {\n        // This could trigger a modal or detailed view\n        console.log(`Showing gauge for ${this.data.labels[dataIndex]}: ${value}`);\n        // You could emit a custom event here for parent components to handle\n        this.dispatchEvent(new CustomEvent('gauge-click', {\n            detail: { month: this.data.labels[dataIndex], score: value }\n        }));\n    }\n}\n\ncustomElements.define('score-history-component', ScoreHistoryComponent);\n\n// Make available globally\nwindow.ScoreHistoryComponent = ScoreHistoryComponent;\n\n"],
  "mappings": "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",
  "names": []
}
