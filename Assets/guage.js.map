{
  "version": 3,
  "sources": ["../src/js/sections/guage.js"],
  "sourcesContent": ["class CreditScoreComponent extends HTMLElement {\n    constructor() {\n        super();\n        this.score = parseInt(this.getAttribute(\"score\"));\n        this.min = parseInt(this.getAttribute(\"min\"));\n        this.max = parseInt(this.getAttribute(\"max\"));\n        this.canvas = this.querySelector(\".gauge\");\n        this.scoreEl = this.querySelector(\"#score\");\n        this.ctx = this.canvas.getContext(\"2d\");\n    }\n\n    connectedCallback() {\n        this.hasAttribute(\"credit-score\") && this.creditScoreComponent();\n        this.hasAttribute(\"doughnut\") && this.doughnutComponent();\n        this.hasAttribute(\"line-chart\") && this.lineChartComponent();\n    }\n\n    lineChartComponent() {\n        const settings = {\n            type: 'line',\n            data: {\n                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n                datasets: [{\n                    label: 'NB Score',\n                    data: [null, null, null, 520, 580, 493, null, 510, null, null, null, null],\n                    borderColor: '#1e3a8a',\n                    borderWidth: 2,\n                    tension: 0,\n                    spanGaps: true,\n                    pointRadius: 0\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: { display: false },\n                    tooltip: { enabled: false }\n                },\n                layout: {\n                    padding: 20\n                },\n                scales: {\n                    y: {\n                        min: 300,\n                        max: 900,\n                        ticks: { stepSize: 100 },\n                        grid: { color: '#ccc', borderDash: [0, 6], drawOnChartArea: true, drawTicks: true }\n                    },\n                    x: {\n                        grid: { color: '#ccc', borderDash: [0, 6], drawOnChartArea: true, drawTicks: true }\n                    }\n                }\n            },\n            plugins: [{\n                id: 'callout',\n                afterDatasetsDraw(chart) {\n                    const lastIndex = 7;\n                    const highlightIndexes = [3, 4, 5, 7]; // Apr, May, Jun, Aug\n                    const { ctx } = chart;\n                    chart.data.datasets[0].data.forEach((value, index) => {\n                        if (!highlightIndexes.includes(index)) return;\n                        const meta = chart.getDatasetMeta(0);\n                        const point = meta.data[index].x !== undefined ? meta.data[index] : meta.data[index].getProps(['x', 'y'], true);\n\n                        const x = point.x;\n                        const y = point.y;\n\n                        // Draw circle point\n                        ctx.beginPath();\n                        ctx.arc(x, y, 6, 0, 2 * Math.PI);\n                        ctx.fillStyle = '#fff';\n                        ctx.fill();\n                        ctx.lineWidth = 4;\n                        ctx.strokeStyle = '#004364';\n                        ctx.stroke();\n\n                        // Tooltip dimensions\n                        const boxWidth = 64;\n                        const boxHeight = 27;\n                        const darkWidth = 20;\n                        const leftRadius = 8;\n                        const boxX = x - 10;\n                        const boxY = y - 40;\n\n                        // Left rectangle\n                        ctx.fillStyle = index === lastIndex ? '#facc15' : '#00A6CA';\n                        ctx.beginPath();\n                        ctx.moveTo(boxX + leftRadius, boxY);\n                        ctx.lineTo(boxX + boxWidth - darkWidth, boxY);\n                        ctx.lineTo(boxX + boxWidth - darkWidth, boxY + boxHeight);\n                        ctx.lineTo(boxX + leftRadius, boxY + boxHeight);\n                        ctx.quadraticCurveTo(boxX, boxY + boxHeight, boxX, boxY + boxHeight - leftRadius);\n                        ctx.lineTo(boxX, boxY + leftRadius);\n                        ctx.quadraticCurveTo(boxX, boxY, boxX + leftRadius, boxY);\n                        ctx.closePath();\n                        ctx.fill();\n\n                        // Right pill section\n                        ctx.fillStyle = index === lastIndex ? '#00A6CA' : '#004364';\n                        ctx.beginPath();\n                        ctx.moveTo(boxX + boxWidth - darkWidth, boxY);\n                        ctx.arc(\n                            boxX + boxWidth - darkWidth / 2,\n                            boxY + boxHeight / 2,\n                            boxHeight / 2,\n                            -Math.PI / 2,\n                            Math.PI / 2,\n                            false\n                        );\n                        ctx.lineTo(boxX + boxWidth - darkWidth, boxY + boxHeight);\n                        ctx.closePath();\n                        ctx.fill();\n\n                        // Value text\n                        ctx.fillStyle = '#fff';\n                        ctx.font = '700 12px Roboto';\n                        ctx.textAlign = 'center';\n                        ctx.textBaseline = 'middle';\n                        ctx.fillText(value, boxX + (boxWidth - darkWidth) / 2, boxY + boxHeight / 2);\n\n                        // Plus or right arrow\n                        ctx.font = 'bold 16px Roboto';\n                        const symbol = index === lastIndex ? '>' : '+';\n                        ctx.fillText(symbol, boxX + boxWidth - darkWidth / 2, boxY + boxHeight / 2);\n                    });\n                }\n            }]\n        }\n        this.drawChart(settings);\n    }\n\n    doughnutComponent() {\n        const settings = {\n            type: 'doughnut',\n            data: {\n                labels: ['Closed credit cards', 'Closed loans', 'Open credit cards', 'Open loans'],\n                datasets: [{\n                    data: [4, 1, 2, 6],\n                    backgroundColor: ['#8b77d9', '#f7e07b', '#9bdaf1', '#7edb95'],\n                    borderWidth: 0\n                }]\n            },\n            options: {\n                cutout: '70%',\n                plugins: {\n                    legend: { display: false },\n                    tooltip: { enabled: false }\n                }\n            }\n        }\n        this.drawChart(settings);\n    }\n\n    creditScoreComponent() {\n        let segments = [200, 50, 50, 50, 50];\n        let colors = [\"#d9534f\", \"#f0ad4e\", \"#ffd700\", \"#a6d785\", \"#3cb371\"];\n\n        if (this.hasAttribute(\"segments\")) {\n            try {\n                segments = JSON.parse(this.getAttribute(\"segments\"));\n            } catch { }\n        }\n        if (this.hasAttribute(\"colors\")) {\n            try {\n                colors = JSON.parse(this.getAttribute(\"colors\").replace(/'/g, '\"'));\n            } catch { }\n        }\n\n        if (!this.canvas || !this.scoreEl) return;\n\n\n        const settings = {\n            type: \"doughnut\",\n            data: {\n                datasets: [{\n                    data: segments,\n                    backgroundColor: colors,\n                    borderColor: \"#fff\",\n                    borderWidth: 2,\n                    circumference: 180,\n                    rotation: 270,\n                    cutout: \"90%\",\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: { display: false },\n                    tooltip: { enabled: false }\n                },\n                // \uD83D\uDC47 Pass values to plugin via custom options\n                custom: {\n                    score: this.score,\n                    min: this.min,\n                    max: this.max\n                }\n            },\n            plugins: [{\n                id: \"needle\",\n                afterDatasetDraw(chart) {\n                    const { ctx } = chart;\n                    const meta = chart.getDatasetMeta(0);\n                    const arcs = meta.data;\n                    if (!arcs.length) return;\n\n                    const centerX = arcs[0].x;\n                    const centerY = arcs[0].y;\n                    const outerRadius = arcs[0].outerRadius;\n\n                    const { score, min, max } = chart.config.options.custom;\n\n                    const clamped = Math.max(min, Math.min(max, score));\n                    const t = (clamped - min) / (max - min);\n\n                    const startAngle = arcs[0].startAngle;\n                    const endAngle = arcs[arcs.length - 1].endAngle;\n                    const angle = startAngle + t * (endAngle - startAngle);\n\n                    const needleLength = outerRadius * 0.7;\n                    const baseHalf = 6;\n                    const tipHalf = 2;\n\n                    // Gray half-circle radius\n                    const grayRadius = 34;\n                    // Offset to lift needle/hub above center\n                    const liftOffset = 30;\n                    const hubX = centerX;\n                    const hubY = centerY + grayRadius / 2 - liftOffset;\n\n                    // Tip position\n                    const tipX = hubX + needleLength * Math.cos(angle);\n                    const tipY = hubY + needleLength * Math.sin(angle);\n\n                    // Near-tip left/right\n                    const tipLeftX = tipX + tipHalf * Math.cos(angle + Math.PI / 2);\n                    const tipLeftY = tipY + tipHalf * Math.sin(angle + Math.PI / 2);\n                    const tipRightX = tipX + tipHalf * Math.cos(angle - Math.PI / 2);\n                    const tipRightY = tipY + tipHalf * Math.sin(angle - Math.PI / 2);\n\n                    // Base left/right (at hub)\n                    const leftX = hubX + baseHalf * Math.cos(angle + Math.PI / 2);\n                    const leftY = hubY + baseHalf * Math.sin(angle + Math.PI / 2);\n                    const rightX = hubX + baseHalf * Math.cos(angle - Math.PI / 2);\n                    const rightY = hubY + baseHalf * Math.sin(angle - Math.PI / 2);\n\n                    ctx.save();\n                    // Gray half-circle\n                    ctx.beginPath();\n                    ctx.arc(centerX, centerY, grayRadius, Math.PI, 2 * Math.PI);\n                    ctx.fillStyle = \"#eee\";\n                    ctx.fill();\n\n                    // Needle\n                    ctx.beginPath();\n                    ctx.moveTo(tipLeftX, tipLeftY);\n                    ctx.lineTo(tipRightX, tipRightY);\n                    ctx.lineTo(rightX, rightY);\n                    ctx.lineTo(leftX, leftY);\n                    ctx.closePath();\n                    ctx.fillStyle = \"#222\";\n                    ctx.fill();\n                    ctx.lineWidth = 1;\n                    ctx.strokeStyle = \"rgba(0,0,0,0.25)\";\n                    ctx.stroke();\n\n                    // Center hub\n                    ctx.beginPath();\n                    ctx.arc(hubX, hubY, 6, 0, 2 * Math.PI);\n                    ctx.fillStyle = \"#222\";\n                    ctx.fill();\n\n                    // Tip hub (small circle at needle tip)\n                    // Tip hub (small circle at needle tip)\n                    ctx.beginPath();\n                    ctx.arc(tipX, tipY, 2, 0, 2 * Math.PI); // smaller radius\n                    ctx.fillStyle = \"#222\";\n                    ctx.fill();\n                    ctx.strokeStyle = \"rgba(0,0,0,0.25)\";\n                    ctx.lineWidth = 1;\n                    ctx.stroke();\n                    ctx.restore();\n                }\n            }]\n        }\n        this.drawChart(settings);\n\n        this.animateNumber();\n    }\n\n    drawChart(settings) {\n        this.gaugeChart = new Chart(this.ctx, settings);\n    }\n\n    animateNumber() {\n        const from = this.min;\n        const to = this.score;\n        const duration = 800;\n        const start = performance.now();\n        const el = this.scoreEl;\n\n        const step = (now) => {\n            const t = Math.min(1, (now - start) / duration);\n            const eased = t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n            const value = Math.round(from + (to - from) * eased);\n            el.textContent = value;\n            if (t < 1) requestAnimationFrame(step);\n            else el.textContent = to;\n        };\n        requestAnimationFrame(step);\n    }\n}\ncustomElements.define(\"credit-score-component\", CreditScoreComponent);\n"],
  "mappings": ";;AAAA,MAAM,uBAAN,cAAmC,YAAY;AAAA,IAC3C,cAAc;AACV,YAAM;AACN,WAAK,QAAQ,SAAS,KAAK,aAAa,OAAO,CAAC;AAChD,WAAK,MAAM,SAAS,KAAK,aAAa,KAAK,CAAC;AAC5C,WAAK,MAAM,SAAS,KAAK,aAAa,KAAK,CAAC;AAC5C,WAAK,SAAS,KAAK,cAAc,QAAQ;AACzC,WAAK,UAAU,KAAK,cAAc,QAAQ;AAC1C,WAAK,MAAM,KAAK,OAAO,WAAW,IAAI;AAAA,IAC1C;AAAA,IAEA,oBAAoB;AAChB,WAAK,aAAa,cAAc,KAAK,KAAK,qBAAqB;AAC/D,WAAK,aAAa,UAAU,KAAK,KAAK,kBAAkB;AACxD,WAAK,aAAa,YAAY,KAAK,KAAK,mBAAmB;AAAA,IAC/D;AAAA,IAEA,qBAAqB;AACjB,YAAM,WAAW;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,UACF,QAAQ,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AAAA,UAC3F,UAAU,CAAC;AAAA,YACP,OAAO;AAAA,YACP,MAAM,CAAC,MAAM,MAAM,MAAM,KAAK,KAAK,KAAK,MAAM,KAAK,MAAM,MAAM,MAAM,IAAI;AAAA,YACzE,aAAa;AAAA,YACb,aAAa;AAAA,YACb,SAAS;AAAA,YACT,UAAU;AAAA,YACV,aAAa;AAAA,UACjB,CAAC;AAAA,QACL;AAAA,QACA,SAAS;AAAA,UACL,YAAY;AAAA,UACZ,qBAAqB;AAAA,UACrB,SAAS;AAAA,YACL,QAAQ,EAAE,SAAS,MAAM;AAAA,YACzB,SAAS,EAAE,SAAS,MAAM;AAAA,UAC9B;AAAA,UACA,QAAQ;AAAA,YACJ,SAAS;AAAA,UACb;AAAA,UACA,QAAQ;AAAA,YACJ,GAAG;AAAA,cACC,KAAK;AAAA,cACL,KAAK;AAAA,cACL,OAAO,EAAE,UAAU,IAAI;AAAA,cACvB,MAAM,EAAE,OAAO,QAAQ,YAAY,CAAC,GAAG,CAAC,GAAG,iBAAiB,MAAM,WAAW,KAAK;AAAA,YACtF;AAAA,YACA,GAAG;AAAA,cACC,MAAM,EAAE,OAAO,QAAQ,YAAY,CAAC,GAAG,CAAC,GAAG,iBAAiB,MAAM,WAAW,KAAK;AAAA,YACtF;AAAA,UACJ;AAAA,QACJ;AAAA,QACA,SAAS,CAAC;AAAA,UACN,IAAI;AAAA,UACJ,kBAAkB,OAAO;AACrB,kBAAM,YAAY;AAClB,kBAAM,mBAAmB,CAAC,GAAG,GAAG,GAAG,CAAC;AACpC,kBAAM,EAAE,IAAI,IAAI;AAChB,kBAAM,KAAK,SAAS,CAAC,EAAE,KAAK,QAAQ,CAAC,OAAO,UAAU;AAClD,kBAAI,CAAC,iBAAiB,SAAS,KAAK,EAAG;AACvC,oBAAM,OAAO,MAAM,eAAe,CAAC;AACnC,oBAAM,QAAQ,KAAK,KAAK,KAAK,EAAE,MAAM,SAAY,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,EAAE,SAAS,CAAC,KAAK,GAAG,GAAG,IAAI;AAE9G,oBAAM,IAAI,MAAM;AAChB,oBAAM,IAAI,MAAM;AAGhB,kBAAI,UAAU;AACd,kBAAI,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,KAAK,EAAE;AAC/B,kBAAI,YAAY;AAChB,kBAAI,KAAK;AACT,kBAAI,YAAY;AAChB,kBAAI,cAAc;AAClB,kBAAI,OAAO;AAGX,oBAAM,WAAW;AACjB,oBAAM,YAAY;AAClB,oBAAM,YAAY;AAClB,oBAAM,aAAa;AACnB,oBAAM,OAAO,IAAI;AACjB,oBAAM,OAAO,IAAI;AAGjB,kBAAI,YAAY,UAAU,YAAY,YAAY;AAClD,kBAAI,UAAU;AACd,kBAAI,OAAO,OAAO,YAAY,IAAI;AAClC,kBAAI,OAAO,OAAO,WAAW,WAAW,IAAI;AAC5C,kBAAI,OAAO,OAAO,WAAW,WAAW,OAAO,SAAS;AACxD,kBAAI,OAAO,OAAO,YAAY,OAAO,SAAS;AAC9C,kBAAI,iBAAiB,MAAM,OAAO,WAAW,MAAM,OAAO,YAAY,UAAU;AAChF,kBAAI,OAAO,MAAM,OAAO,UAAU;AAClC,kBAAI,iBAAiB,MAAM,MAAM,OAAO,YAAY,IAAI;AACxD,kBAAI,UAAU;AACd,kBAAI,KAAK;AAGT,kBAAI,YAAY,UAAU,YAAY,YAAY;AAClD,kBAAI,UAAU;AACd,kBAAI,OAAO,OAAO,WAAW,WAAW,IAAI;AAC5C,kBAAI;AAAA,gBACA,OAAO,WAAW,YAAY;AAAA,gBAC9B,OAAO,YAAY;AAAA,gBACnB,YAAY;AAAA,gBACZ,CAAC,KAAK,KAAK;AAAA,gBACX,KAAK,KAAK;AAAA,gBACV;AAAA,cACJ;AACA,kBAAI,OAAO,OAAO,WAAW,WAAW,OAAO,SAAS;AACxD,kBAAI,UAAU;AACd,kBAAI,KAAK;AAGT,kBAAI,YAAY;AAChB,kBAAI,OAAO;AACX,kBAAI,YAAY;AAChB,kBAAI,eAAe;AACnB,kBAAI,SAAS,OAAO,QAAQ,WAAW,aAAa,GAAG,OAAO,YAAY,CAAC;AAG3E,kBAAI,OAAO;AACX,oBAAM,SAAS,UAAU,YAAY,MAAM;AAC3C,kBAAI,SAAS,QAAQ,OAAO,WAAW,YAAY,GAAG,OAAO,YAAY,CAAC;AAAA,YAC9E,CAAC;AAAA,UACL;AAAA,QACJ,CAAC;AAAA,MACL;AACA,WAAK,UAAU,QAAQ;AAAA,IAC3B;AAAA,IAEA,oBAAoB;AAChB,YAAM,WAAW;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,UACF,QAAQ,CAAC,uBAAuB,gBAAgB,qBAAqB,YAAY;AAAA,UACjF,UAAU,CAAC;AAAA,YACP,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,YACjB,iBAAiB,CAAC,WAAW,WAAW,WAAW,SAAS;AAAA,YAC5D,aAAa;AAAA,UACjB,CAAC;AAAA,QACL;AAAA,QACA,SAAS;AAAA,UACL,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,QAAQ,EAAE,SAAS,MAAM;AAAA,YACzB,SAAS,EAAE,SAAS,MAAM;AAAA,UAC9B;AAAA,QACJ;AAAA,MACJ;AACA,WAAK,UAAU,QAAQ;AAAA,IAC3B;AAAA,IAEA,uBAAuB;AACnB,UAAI,WAAW,CAAC,KAAK,IAAI,IAAI,IAAI,EAAE;AACnC,UAAI,SAAS,CAAC,WAAW,WAAW,WAAW,WAAW,SAAS;AAEnE,UAAI,KAAK,aAAa,UAAU,GAAG;AAC/B,YAAI;AACA,qBAAW,KAAK,MAAM,KAAK,aAAa,UAAU,CAAC;AAAA,QACvD,QAAQ;AAAA,QAAE;AAAA,MACd;AACA,UAAI,KAAK,aAAa,QAAQ,GAAG;AAC7B,YAAI;AACA,mBAAS,KAAK,MAAM,KAAK,aAAa,QAAQ,EAAE,QAAQ,MAAM,GAAG,CAAC;AAAA,QACtE,QAAQ;AAAA,QAAE;AAAA,MACd;AAEA,UAAI,CAAC,KAAK,UAAU,CAAC,KAAK,QAAS;AAGnC,YAAM,WAAW;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,UACF,UAAU,CAAC;AAAA,YACP,MAAM;AAAA,YACN,iBAAiB;AAAA,YACjB,aAAa;AAAA,YACb,aAAa;AAAA,YACb,eAAe;AAAA,YACf,UAAU;AAAA,YACV,QAAQ;AAAA,UACZ,CAAC;AAAA,QACL;AAAA,QACA,SAAS;AAAA,UACL,YAAY;AAAA,UACZ,qBAAqB;AAAA,UACrB,SAAS;AAAA,YACL,QAAQ,EAAE,SAAS,MAAM;AAAA,YACzB,SAAS,EAAE,SAAS,MAAM;AAAA,UAC9B;AAAA;AAAA,UAEA,QAAQ;AAAA,YACJ,OAAO,KAAK;AAAA,YACZ,KAAK,KAAK;AAAA,YACV,KAAK,KAAK;AAAA,UACd;AAAA,QACJ;AAAA,QACA,SAAS,CAAC;AAAA,UACN,IAAI;AAAA,UACJ,iBAAiB,OAAO;AACpB,kBAAM,EAAE,IAAI,IAAI;AAChB,kBAAM,OAAO,MAAM,eAAe,CAAC;AACnC,kBAAM,OAAO,KAAK;AAClB,gBAAI,CAAC,KAAK,OAAQ;AAElB,kBAAM,UAAU,KAAK,CAAC,EAAE;AACxB,kBAAM,UAAU,KAAK,CAAC,EAAE;AACxB,kBAAM,cAAc,KAAK,CAAC,EAAE;AAE5B,kBAAM,EAAE,OAAO,KAAK,IAAI,IAAI,MAAM,OAAO,QAAQ;AAEjD,kBAAM,UAAU,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,CAAC;AAClD,kBAAM,KAAK,UAAU,QAAQ,MAAM;AAEnC,kBAAM,aAAa,KAAK,CAAC,EAAE;AAC3B,kBAAM,WAAW,KAAK,KAAK,SAAS,CAAC,EAAE;AACvC,kBAAM,QAAQ,aAAa,KAAK,WAAW;AAE3C,kBAAM,eAAe,cAAc;AACnC,kBAAM,WAAW;AACjB,kBAAM,UAAU;AAGhB,kBAAM,aAAa;AAEnB,kBAAM,aAAa;AACnB,kBAAM,OAAO;AACb,kBAAM,OAAO,UAAU,aAAa,IAAI;AAGxC,kBAAM,OAAO,OAAO,eAAe,KAAK,IAAI,KAAK;AACjD,kBAAM,OAAO,OAAO,eAAe,KAAK,IAAI,KAAK;AAGjD,kBAAM,WAAW,OAAO,UAAU,KAAK,IAAI,QAAQ,KAAK,KAAK,CAAC;AAC9D,kBAAM,WAAW,OAAO,UAAU,KAAK,IAAI,QAAQ,KAAK,KAAK,CAAC;AAC9D,kBAAM,YAAY,OAAO,UAAU,KAAK,IAAI,QAAQ,KAAK,KAAK,CAAC;AAC/D,kBAAM,YAAY,OAAO,UAAU,KAAK,IAAI,QAAQ,KAAK,KAAK,CAAC;AAG/D,kBAAM,QAAQ,OAAO,WAAW,KAAK,IAAI,QAAQ,KAAK,KAAK,CAAC;AAC5D,kBAAM,QAAQ,OAAO,WAAW,KAAK,IAAI,QAAQ,KAAK,KAAK,CAAC;AAC5D,kBAAM,SAAS,OAAO,WAAW,KAAK,IAAI,QAAQ,KAAK,KAAK,CAAC;AAC7D,kBAAM,SAAS,OAAO,WAAW,KAAK,IAAI,QAAQ,KAAK,KAAK,CAAC;AAE7D,gBAAI,KAAK;AAET,gBAAI,UAAU;AACd,gBAAI,IAAI,SAAS,SAAS,YAAY,KAAK,IAAI,IAAI,KAAK,EAAE;AAC1D,gBAAI,YAAY;AAChB,gBAAI,KAAK;AAGT,gBAAI,UAAU;AACd,gBAAI,OAAO,UAAU,QAAQ;AAC7B,gBAAI,OAAO,WAAW,SAAS;AAC/B,gBAAI,OAAO,QAAQ,MAAM;AACzB,gBAAI,OAAO,OAAO,KAAK;AACvB,gBAAI,UAAU;AACd,gBAAI,YAAY;AAChB,gBAAI,KAAK;AACT,gBAAI,YAAY;AAChB,gBAAI,cAAc;AAClB,gBAAI,OAAO;AAGX,gBAAI,UAAU;AACd,gBAAI,IAAI,MAAM,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE;AACrC,gBAAI,YAAY;AAChB,gBAAI,KAAK;AAIT,gBAAI,UAAU;AACd,gBAAI,IAAI,MAAM,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE;AACrC,gBAAI,YAAY;AAChB,gBAAI,KAAK;AACT,gBAAI,cAAc;AAClB,gBAAI,YAAY;AAChB,gBAAI,OAAO;AACX,gBAAI,QAAQ;AAAA,UAChB;AAAA,QACJ,CAAC;AAAA,MACL;AACA,WAAK,UAAU,QAAQ;AAEvB,WAAK,cAAc;AAAA,IACvB;AAAA,IAEA,UAAU,UAAU;AAChB,WAAK,aAAa,IAAI,MAAM,KAAK,KAAK,QAAQ;AAAA,IAClD;AAAA,IAEA,gBAAgB;AACZ,YAAM,OAAO,KAAK;AAClB,YAAM,KAAK,KAAK;AAChB,YAAM,WAAW;AACjB,YAAM,QAAQ,YAAY,IAAI;AAC9B,YAAM,KAAK,KAAK;AAEhB,YAAM,OAAO,CAAC,QAAQ;AAClB,cAAM,IAAI,KAAK,IAAI,IAAI,MAAM,SAAS,QAAQ;AAC9C,cAAM,QAAQ,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,KAAK;AACvD,cAAM,QAAQ,KAAK,MAAM,QAAQ,KAAK,QAAQ,KAAK;AACnD,WAAG,cAAc;AACjB,YAAI,IAAI,EAAG,uBAAsB,IAAI;AAAA,YAChC,IAAG,cAAc;AAAA,MAC1B;AACA,4BAAsB,IAAI;AAAA,IAC9B;AAAA,EACJ;AACA,iBAAe,OAAO,0BAA0B,oBAAoB;",
  "names": []
}
