{
  "version": 3,
  "sources": ["../src/js/sections/nb-score-dashboard.js"],
  "sourcesContent": ["class NBScoreDashboardComponent extends HTMLElement {\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        this.render();\n        this.addStyles();\n    }\n\n    render() {\n        this.innerHTML = `\n            <div class=\"nb-dashboard\">\n                <div class=\"dashboard-header\">\n                    <h2>NB SCORE HISTORY</h2>\n                </div>\n                \n                <div class=\"dashboard-content\">\n                    <div class=\"chart-section\">\n                        <div class=\"chart-title\">\n                            Trended view of the changes in your NB Score with every refresh.\n                        </div>\n                        <div class=\"chart-container\">\n                            <canvas id=\"score-history-chart\" width=\"800\" height=\"400\"></canvas>\n                        </div>\n                    </div>\n                    \n                    <div class=\"list-section\">\n                        <score-list-component></score-list-component>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Initialize the chart after DOM is ready\n        setTimeout(() => {\n            this.initChart();\n        }, 100);\n    }\n\n    initChart() {\n        const canvas = this.querySelector('#score-history-chart');\n        if (!canvas) return;\n\n        const ctx = canvas.getContext('2d');\n\n        const data = {\n            labels: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],\n            datasets: [{\n                label: 'NB Score',\n                data: [null, null, null, 520, 580, 493, null, 510, null, null, null, null],\n                borderColor: '#1e40af',\n                backgroundColor: '#1e40af',\n                borderWidth: 3,\n                pointRadius: 6,\n                pointHoverRadius: 8,\n                pointBackgroundColor: '#1e40af',\n                pointBorderColor: '#ffffff',\n                pointBorderWidth: 2,\n                tension: 0.1,\n                fill: false\n            }]\n        };\n\n        const options = {\n            responsive: true,\n            maintainAspectRatio: false,\n            interaction: {\n                intersect: false,\n                mode: 'index'\n            },\n            plugins: {\n                legend: {\n                    display: false\n                },\n                tooltip: {\n                    enabled: true,\n                    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                    titleColor: '#fff',\n                    bodyColor: '#fff',\n                    borderColor: '#1e40af',\n                    borderWidth: 1,\n                    callbacks: {\n                        title: function (context) {\n                            return context[0].label;\n                        },\n                        label: function (context) {\n                            return `Score: ${context.parsed.y}`;\n                        }\n                    }\n                }\n            },\n            scales: {\n                x: {\n                    display: true,\n                    grid: {\n                        display: true,\n                        color: 'rgba(0, 0, 0, 0.1)',\n                        lineWidth: 1\n                    },\n                    ticks: {\n                        color: '#666',\n                        font: {\n                            size: 12\n                        }\n                    }\n                },\n                y: {\n                    display: true,\n                    min: 300,\n                    max: 900,\n                    ticks: {\n                        stepSize: 100,\n                        color: '#666',\n                        font: {\n                            size: 12\n                        }\n                    },\n                    grid: {\n                        display: true,\n                        color: 'rgba(0, 0, 0, 0.1)',\n                        lineWidth: 1\n                    }\n                }\n            },\n            onHover: (event, activeElements) => {\n                canvas.style.cursor = activeElements.length > 0 ? 'pointer' : 'default';\n            },\n            onClick: (event, activeElements) => {\n                if (activeElements.length > 0) {\n                    const dataIndex = activeElements[0].index;\n                    const value = data.datasets[0].data[dataIndex];\n                    if (value !== null) {\n                        this.showGaugeAtPoint(dataIndex, value);\n                    }\n                }\n            }\n        };\n\n        const plugins = [{\n            id: 'gaugeOverlay',\n            afterDraw: (chart) => {\n                this.drawGaugeOverlay(chart);\n            }\n        }, {\n            id: 'dataLabels',\n            afterDatasetsDraw: (chart) => {\n                this.drawDataLabels(chart);\n            }\n        }];\n\n        this.chart = new Chart(ctx, {\n            type: 'line',\n            data: data,\n            options: options,\n            plugins: plugins\n        });\n    }\n\n    drawGaugeOverlay(chart) {\n        const { ctx } = chart;\n        const meta = chart.getDatasetMeta(0);\n        const data = meta.data;\n\n        // Find the point with gauge (August - index 7)\n        const gaugeIndex = 7;\n        if (data[gaugeIndex] && !data[gaugeIndex].skip) {\n            const point = data[gaugeIndex];\n            const value = 510; // August score\n\n            if (value !== null) {\n                this.drawGaugeAtPoint(ctx, point.x, point.y, value);\n            }\n        }\n    }\n\n    drawGaugeAtPoint(ctx, x, y, score) {\n        const gaugeRadius = 40;\n        const needleLength = gaugeRadius * 0.6;\n        const centerX = x;\n        const centerY = y - gaugeRadius - 20;\n\n        ctx.save();\n\n        // Draw gauge background (semicircle)\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, gaugeRadius, Math.PI, 2 * Math.PI);\n        ctx.fillStyle = '#f3f4f6';\n        ctx.fill();\n        ctx.strokeStyle = '#d1d5db';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n\n        // Draw gauge segments\n        const segments = [\n            { start: Math.PI, end: Math.PI + Math.PI * 0.2, color: '#ef4444' },\n            { start: Math.PI + Math.PI * 0.2, end: Math.PI + Math.PI * 0.4, color: '#f59e0b' },\n            { start: Math.PI + Math.PI * 0.4, end: Math.PI + Math.PI * 0.6, color: '#eab308' },\n            { start: Math.PI + Math.PI * 0.6, end: Math.PI + Math.PI * 0.8, color: '#22c55e' },\n            { start: Math.PI + Math.PI * 0.8, end: 2 * Math.PI, color: '#16a34a' }\n        ];\n\n        segments.forEach(segment => {\n            ctx.beginPath();\n            ctx.arc(centerX, centerY, gaugeRadius - 5, segment.start, segment.end);\n            ctx.lineWidth = 8;\n            ctx.strokeStyle = segment.color;\n            ctx.stroke();\n        });\n\n        // Calculate needle angle\n        const min = 300;\n        const max = 900;\n        const clamped = Math.max(min, Math.min(max, score));\n        const t = (clamped - min) / (max - min);\n        const angle = Math.PI + t * Math.PI;\n\n        // Draw needle\n        const tipX = centerX + needleLength * Math.cos(angle);\n        const tipY = centerY + needleLength * Math.sin(angle);\n        const baseHalf = 4;\n\n        const leftX = centerX + baseHalf * Math.cos(angle + Math.PI / 2);\n        const leftY = centerY + baseHalf * Math.sin(angle + Math.PI / 2);\n        const rightX = centerX + baseHalf * Math.cos(angle - Math.PI / 2);\n        const rightY = centerY + baseHalf * Math.sin(angle - Math.PI / 2);\n\n        ctx.beginPath();\n        ctx.moveTo(tipX, tipY);\n        ctx.lineTo(leftX, leftY);\n        ctx.lineTo(rightX, rightY);\n        ctx.closePath();\n        ctx.fillStyle = '#1f2937';\n        ctx.fill();\n\n        // Draw center hub\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, 6, 0, 2 * Math.PI);\n        ctx.fillStyle = '#1f2937';\n        ctx.fill();\n\n        // Draw score text\n        ctx.fillStyle = '#1f2937';\n        ctx.font = 'bold 14px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(score.toString(), centerX, centerY + 5);\n\n        ctx.restore();\n    }\n\n    drawDataLabels(chart) {\n        const { ctx } = chart;\n        const meta = chart.getDatasetMeta(0);\n        const data = meta.data;\n\n        ctx.save();\n        ctx.font = 'bold 12px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'bottom';\n\n        data.forEach((point, index) => {\n            const value = [null, null, null, 520, 580, 493, null, 510, null, null, null, null][index];\n            if (value !== null) {\n                const labelText = `${value} +`;\n                const textWidth = ctx.measureText(labelText).width;\n                const labelX = point.x;\n                const labelY = point.y - 15;\n\n                let bgColor = '#1e40af';\n                if (index === 7) bgColor = '#f59e0b'; // August - yellow\n\n                ctx.fillStyle = bgColor;\n                ctx.fillRect(labelX - textWidth / 2 - 4, labelY - 16, textWidth + 8, 18);\n\n                ctx.fillStyle = '#ffffff';\n                ctx.fillText(labelText, labelX, labelY);\n            }\n        });\n\n        ctx.restore();\n    }\n\n    showGaugeAtPoint(dataIndex, value) {\n        console.log(`Showing gauge for ${dataIndex}: ${value}`);\n    }\n\n    addStyles() {\n        if (document.getElementById('nb-dashboard-styles')) return;\n\n        const style = document.createElement('style');\n        style.id = 'nb-dashboard-styles';\n        style.textContent = `\n            .nb-dashboard {\n                background: #ffffff;\n                border-radius: 12px;\n                padding: 24px;\n                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            }\n            \n            .dashboard-header h2 {\n                margin: 0 0 24px 0;\n                font-size: 24px;\n                font-weight: 700;\n                color: #1f2937;\n                letter-spacing: 0.5px;\n            }\n            \n            .dashboard-content {\n                display: grid;\n                grid-template-columns: 2fr 1fr;\n                gap: 24px;\n            }\n            \n            .chart-section {\n                background: #ffffff;\n                border-radius: 8px;\n                padding: 20px;\n            }\n            \n            .chart-title {\n                font-size: 14px;\n                color: #6b7280;\n                margin-bottom: 20px;\n                font-weight: 500;\n            }\n            \n            .chart-container {\n                position: relative;\n                height: 400px;\n            }\n            \n            .list-section {\n                background: #f9fafb;\n                border-radius: 8px;\n                padding: 16px;\n            }\n            \n            @media (max-width: 768px) {\n                .dashboard-content {\n                    grid-template-columns: 1fr;\n                }\n            }\n        `;\n        document.head.appendChild(style);\n    }\n}\n\ncustomElements.define('nb-score-dashboard', NBScoreDashboardComponent);\n\n// Make available globally\nwindow.NBScoreDashboardComponent = NBScoreDashboardComponent;\n\n"],
  "mappings": "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",
  "names": []
}
